" {{{ PLUGINS
call plug#begin()

" file manager (on the left)
Plug 'preservim/nerdtree'

" fuzzy finder
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" light statusline/tabline
Plug 'itchyny/lightline.vim'

" css color
Plug 'ap/vim-css-color'

" comments/uncomments
" gcc to un/comment out a line (takes a count)
" gc to un/comment out the target of a motion (ex: gcap to comment a paragraph)
" gc in visual mode to un/comment
" gcgc to uncomments a set of adjacent commented lines
Plug 'tpope/vim-commentary'

" easily delete/change/add surroundings in pairs
" lets start with "Hello World!"
" cs"' to get 'Hello World!'
" cs'<q> to get <q>Hello World!</q>
" cst" to get "Hello World!"
" ds" to remove "Hello World!" to Hello World!
" ysiw] with the cursor on Hello, to get [Hello] World!
" yss) to wrap the entire line with parentheses ([Hello] World!)
" ds[ds) revert to Hello World! 
Plug 'tpope/vim-surround'

" GIT
" Show git diff in the sign column, can act on it
Plug 'airblade/vim-gitgutter'
" Allow to use git command in vim with good behavior
Plug 'tpope/vim-fugitive'
" Git commit browser
Plug 'junegunn/gv.vim'

" LANGUAGE (using COC)
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" ZIG
Plug 'ziglang/zig.vim'

call plug#end() " automatically executes 'filetype plugin indent on' and 'syntax enable'
" }}}

" {{{ BASIC

" do not act as VI
set nocompatible

" relative number
set relativenumber

" ignore case when searching
set ignorecase

" highlight the first match on the fly
set incsearch

" autoindent new line
set autoindent

" 4 spaces tabulations
set softtabstop=4 

" cut the line at word, not at char
set linebreak

" looks for markers in the text
set foldmethod=marker

" open vsplit on the right
set splitright

" }}}

" {{{ KEYBINDING

" change leader key
let mapleader=","

" usable vim
inoremap jk <Esc>
inoremap kj <Esc>
cnoremap jk <Esc>
cnoremap kj <Esc>
set timeoutlen=500

"move between nerdtree/files/buffers
nnoremap <C-j> <C-w>j   
inoremap <C-j> <C-w>j   
cnoremap <C-j> <C-w>j   

nnoremap <C-h> <C-w>h   
inoremap <C-h> <C-w>h   
cnoremap <C-h> <C-w>h   

nnoremap <C-k> <C-w>k 
cnoremap <C-k> <C-w>k 

nnoremap <C-l> <C-w>l 
cnoremap <C-l> <C-w>l

" copy content of the current file to system clipboard
" can't be ignored if vim is compile with clipboard option
nnoremap ùù :!xclip -sel c < %<CR><CR>
inoremap ùù <Esc>:!xclip -sel c < %<CR><CR>i
vnoremap ùù :w !xclip -sel clip<CR><CR> 

" switch tab from terminal
tnoremap gt <C-w>gt

" COC
nnoremap <silent><nowait> gd <Plug>(coc-definition)
nnoremap <silent><nowait> gy <Plug>(coc-type-definition)
nnoremap <silent> K :call ShowDocumentation()<CR>
nnoremap rn <Plug>(coc-rename)

" use tab to cycle through suggestion
inoremap <silent><expr> <TAB>
    \ coc#pum#visible() ? coc#pum#next(1):
    \ CheckBackspace() ? "\<Tab>":
    \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1): "\<C-h>"

function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col-1] =~#'\s'
endfunction

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
    \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" fuzzy finder
nnoremap <Leader>t :FZF<CR>
nnoremap <Leader>h :Ag<CR>

" git
" remove other GitGutter mappings
let g:gitgutter_map_keys = 0 
nnoremap ghn <Plug>(GitGutterNextHunk)
nnoremap ghp <Plug>(GitGutterPrevHunk)
nnoremap ghu <Plug>(GitGutterUndoHunk)
nnoremap ghs <Plug>(GitGutterStageHunk)

" open commit browser for current file
nnoremap ghv :GV!<CR>
" open commit browser for all files
nnoremap ghh :GV<CR>

" search in buffers
nnoremap <Leader>b :call feedkeys(":b \<Tab>", "t")<CR>

" edit from completion
nnoremap <Leader>e :call feedkeys(":e \<Tab>", "t")<CR>

" }}}

" {{{ FINDING FILES
" search down into subfolders
" provides tab-completion for all file-related tasks
set path+=**

" display all matching files when we tab complete
set wildmenu

" THINGS TO CONSIDER:
" - :b lets you autocomplete any open buffer
" }}}

" {{{ FILES MANAGER
" Start NERDTree. If a file is specified, move the cursor to its window.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * NERDTree | if argc() > 0 || exists("s:std_in") | wincmd p | endif

" Close the tab if NERDTree is the only window remaining in it. Also exit the
" terminal tab.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | call feedkeys(":quit\<CR>:\<BS>\<C-c>\<CR>exit\<CR>") | endif
" }}}

" {{{ GIT
" time in ms before the sign column appear after a modification
" (<!> also control the delay before vim writes its swap)
set updatetime=100
" }}}

" {{{ TERMINAL
" Open a terminal in new tab
autocmd VimEnter * tab terminal++kill=hup
" move back to file tab
autocmd VimEnter * call feedkeys("gt")
" }}}

" {{{ LANGUAGE 
" ZIG
" don't show parse errors in a separate window
let g:zig_fmt_parse_errors = 0
" disable format-on-save from `ziglang/zig.vim`
let g:zig_fmt_autosave = 0

" COC
function! ShowDocumentation()
 if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
 else
    call feedkeys('K', 'in')
 endif
endfunction

" }}} 

" {{{ TAG JUMPING
" create the `tags` file (may need to install universal-ctags first)
command! MakeTags !ctags -R .

" NOW WE CAN:
" - Use ^] to jump to tag under cursor
" - Use g^] for ambiguous tags
" - Use ^t to jump back up the tag stack
" }}}

" {{{ AUTOCOMPLETE
" HIGHLIGHTS:
" - ^x^n for JUST this file
" - ^x^f for filenames (works with our path trick!)
" - ^x^] for tags only
" }}}

" {{{ SNIPPETS
" May need an actual plugin for this one
" read an empty HTML template and move the cursor to title
" nnoremap ,html :-1read $HOME/.vim/.sheleton.html<CR>3jwf>a
" }}}

" {{{ THEME
set termguicolors
colorscheme catppuccin_latte

" lightline plugin config
set laststatus=2
let g:lightline = {
    \'colorscheme': 'catppuccin_latte',
    \'active': {
    \	'left': [['mode', 'paste'],
    \		['readonly', 'filename', 'modified']],
    \	'right':[['lineinfo', 'gitbranch'],
    \		['percent'],
    \		['fileencoding','filetype']]
    \},
    \'component_function': {
    \	'gitbranch': 'FugitiveHead'
    \},
    \}

" The foreground color of the category LineNr (which display line number) is use by the
" QuickFixLine category as background color.
" As catppuccin_latte theme use the same color for both, the line number
" in QuickFix popup error become invisible.
" Fix with:
highlight LineNr guifg=#7C7F93 "s:overlay2 in catppucin theme
highlight QuickFixLine guibg=#DCE0E8  "s:crust in catppucin theme
set noshowmode
" }}}
